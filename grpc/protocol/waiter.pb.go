// Code generated by protoc-gen-go. DO NOT EDIT.
// source: waiter.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CustomerRequest struct {
	Request              string   `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomerRequest) Reset()         { *m = CustomerRequest{} }
func (m *CustomerRequest) String() string { return proto.CompactTextString(m) }
func (*CustomerRequest) ProtoMessage()    {}
func (*CustomerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_44e695b318376501, []int{0}
}

func (m *CustomerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomerRequest.Unmarshal(m, b)
}
func (m *CustomerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomerRequest.Marshal(b, m, deterministic)
}
func (m *CustomerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerRequest.Merge(m, src)
}
func (m *CustomerRequest) XXX_Size() int {
	return xxx_messageInfo_CustomerRequest.Size(m)
}
func (m *CustomerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerRequest proto.InternalMessageInfo

func (m *CustomerRequest) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

type WaiterReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaiterReply) Reset()         { *m = WaiterReply{} }
func (m *WaiterReply) String() string { return proto.CompactTextString(m) }
func (*WaiterReply) ProtoMessage()    {}
func (*WaiterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_44e695b318376501, []int{1}
}

func (m *WaiterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaiterReply.Unmarshal(m, b)
}
func (m *WaiterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaiterReply.Marshal(b, m, deterministic)
}
func (m *WaiterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaiterReply.Merge(m, src)
}
func (m *WaiterReply) XXX_Size() int {
	return xxx_messageInfo_WaiterReply.Size(m)
}
func (m *WaiterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_WaiterReply.DiscardUnknown(m)
}

var xxx_messageInfo_WaiterReply proto.InternalMessageInfo

func (m *WaiterReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*CustomerRequest)(nil), "protocol.CustomerRequest")
	proto.RegisterType((*WaiterReply)(nil), "protocol.WaiterReply")
}

func init() {
	proto.RegisterFile("waiter.proto", fileDescriptor_44e695b318376501)
}

var fileDescriptor_44e695b318376501 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4f, 0xcc, 0x2c,
	0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0xc9, 0xf9, 0x39, 0x4a,
	0xda, 0x5c, 0xfc, 0xce, 0xa5, 0xc5, 0x25, 0xf9, 0xb9, 0xa9, 0x45, 0x41, 0xa9, 0x85, 0xa5, 0xa9,
	0xc5, 0x25, 0x42, 0x12, 0x5c, 0xec, 0x45, 0x10, 0xa6, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10,
	0x8c, 0xab, 0xa4, 0xce, 0xc5, 0x1d, 0x0e, 0x36, 0x26, 0x28, 0xb5, 0x20, 0xa7, 0x12, 0xa4, 0x30,
	0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x15, 0xa6, 0x10, 0xca, 0x35, 0x0a, 0xe4, 0x62, 0x83, 0x28,
	0x14, 0x72, 0xe7, 0x12, 0xf4, 0x2f, 0x4a, 0x49, 0x2d, 0x72, 0x2b, 0xca, 0xcf, 0x85, 0x59, 0x24,
	0x24, 0xa9, 0x07, 0xb3, 0x5f, 0x0f, 0xcd, 0x72, 0x29, 0x51, 0x84, 0x14, 0x92, 0x55, 0x4a, 0x0c,
	0x49, 0x6c, 0x60, 0x71, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x44, 0x27, 0x4e, 0x20, 0xc9,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WaiterClient is the client API for Waiter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WaiterClient interface {
	OrderFromCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*WaiterReply, error)
}

type waiterClient struct {
	cc grpc.ClientConnInterface
}

func NewWaiterClient(cc grpc.ClientConnInterface) WaiterClient {
	return &waiterClient{cc}
}

func (c *waiterClient) OrderFromCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*WaiterReply, error) {
	out := new(WaiterReply)
	err := c.cc.Invoke(ctx, "/protocol.Waiter/OrderFromCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WaiterServer is the server API for Waiter service.
type WaiterServer interface {
	OrderFromCustomer(context.Context, *CustomerRequest) (*WaiterReply, error)
}

// UnimplementedWaiterServer can be embedded to have forward compatible implementations.
type UnimplementedWaiterServer struct {
}

func (*UnimplementedWaiterServer) OrderFromCustomer(ctx context.Context, req *CustomerRequest) (*WaiterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderFromCustomer not implemented")
}

func RegisterWaiterServer(s *grpc.Server, srv WaiterServer) {
	s.RegisterService(&_Waiter_serviceDesc, srv)
}

func _Waiter_OrderFromCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaiterServer).OrderFromCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Waiter/OrderFromCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaiterServer).OrderFromCustomer(ctx, req.(*CustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Waiter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Waiter",
	HandlerType: (*WaiterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderFromCustomer",
			Handler:    _Waiter_OrderFromCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "waiter.proto",
}
